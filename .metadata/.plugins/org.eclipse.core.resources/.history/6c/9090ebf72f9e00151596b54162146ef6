package application;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import net.sf.image4j.codec.ico.ICODecoder;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ListChangeListener;
import javafx.concurrent.Worker.State;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Node;
import javafx.scene.control.Tab;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.WritableImage;
import javafx.scene.web.WebView;
import javafx.stage.FileChooser;
public class CostomWebView {
	static ArrayList<String> webhistory = new ArrayList<String>();
	WebView web;
	ImageView iconView = null;
	TextField urlField;
	Tab tab;
	String[] downloadEnds = {".doc",".xls",".zip",".tgz",".jar",".exe",".lzh"};
	
	CostomWebView(Tab t, TextField tf){
		tab = t;
		urlField = tf;
		web = new WebView();
		web.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		AddListeners();

		/*web.getChildrenUnmodifiable().addListener(new ListChangeListener<Node>(){
			@Override
			public void onChanged(	javafx.collections.ListChangeListener.Change<? extends Node> c) {
				Set<Node > deadSeaScrolls = web.lookupAll(".scroll-bar");
				for(Node scroll : deadSeaScrolls){
					scroll.setVisible(false);
				}
			}
		});*/
	}
	void AddListeners(){
		web.getEngine().getLoadWorker().stateProperty().addListener(
		        new ChangeListener<State>() {
		            public void changed(ObservableValue ov, State oldState, State newState) {
		                if (newState == State.SUCCEEDED) {

		                	urlField.setText(web.getEngine().getLocation());
		                	String title = web.getEngine().getTitle();
		                	SettingController.webHistory.add(title+" : "+web.getEngine().getLocation());
		                	if( title != null){
			                	webhistory.add(title + web.getEngine().getLocation());
			                	try{
				                	if (title.length() > 10){
				                		title = title.substring(0,9);
				                	}
				                	tab.setText(title);
				                	String fullURL = web.getEngine().getLocation();
				                	iconView = new ImageView(getIconImage(toFaviURL(fullURL)));
				                	tab.setGraphic(iconView);
			                	}catch(NullPointerException ne){
			                		System.out.println(title+"When tab's title set webTitle, webTitle is null " + ne );
			                	}
		                	}
		                }
		                else if(newState == State.RUNNING){
		    				tab.setGraphic(new ImageView(new Image(getClass().getResourceAsStream("loading.gif"),16,16, false, false)));
		                }
		                else if(newState == State.FAILED){
		    				BufferedImage img = null;
		    				List<BufferedImage> imgs = null;
							try {
								imgs = ICODecoder.read(getClass().getResourceAsStream("default.ico"));
							} catch (IOException e) {
								e.printStackTrace();
							}
		    				img = imgs != null ? imgs.size() > 0 ? imgs.get(0) : null : null;
		    				img = resize(img,16,16);
		    				WritableImage imfx = SwingFXUtils.toFXImage(img, null);
		    				tab.setGraphic(new ImageView(imfx));
		                	System.out.println("FAILED");
		                }
		            }
		        });
		web.getEngine().locationProperty().addListener(new ChangeListener<String>(){
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldLoc, String newLoc){
				// TODO Auto-generated method stub
				String downloadEnd = null;
				String[] downloadEnds = {".doc",".xls",".zip",".tgz",".jar",".exe",".lzh"};
				String[] url_split;
				String url_end;
				
				url_split = newLoc.split("/",0);
				url_end = url_split[url_split.length-1];
				
				for (String end : downloadEnds){
					if(url_end.indexOf(end) != -1){
						downloadEnd = end;
						break;
					}
				}
				
				if (downloadEnd != null){
					FileChooser chooser = new FileChooser();
					System.out.println("newLoc " + newLoc);
					chooser.setTitle("save" + newLoc);
					chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(downloadEnd.substring(1,downloadEnd.length()) +" flie", downloadEnd));
					
					File userDirectory = new File(System.getProperty("user.home"));
					chooser.setInitialDirectory(userDirectory);
					
					int fileNameIdx = newLoc.lastIndexOf("/")+1;
					if(fileNameIdx != 0){
						File saveFile = chooser.showSaveDialog(web.getScene().getWindow());
						if(saveFile != null){
							BufferedInputStream inStream = null;
							BufferedOutputStream outStream = null;
							try{
								inStream = new BufferedInputStream(new URL(newLoc).openStream());
								outStream = new BufferedOutputStream(new FileOutputStream(saveFile));
								int tmp = inStream.read();
								while(tmp != -1){
									outStream.write(tmp);
									tmp = inStream.read();
								}
								SettingController.webDownloadHistory.add(newLoc);
							}catch(FileNotFoundException e){
								System.out.println("Can't save file" + e);
							}catch(MalformedURLException e){
								System.out.println("Can't save file" + e);
							}catch(IOException e){
								System.out.println("Can't save file" + e);
							}finally{
								try{if(inStream != null) inStream.close();}catch(IOException e){System.out.println("Can't close inStream"+e);}
								try{if(outStream != null) outStream.close();}catch(IOException e){System.out.println("Can't close outStream"+e);}
							}
						}
					}
				}
				
			}
			
		});
	}
	public Image getIconImage(String url){
		//url = "http://www.google.com/s2/favicons?domain=www.yahoo.co.jp";
		InputStream input = null;
		try {
			//System.out.println("test2");
			URL favURL = new URL(url);
			input = favURL.openStream();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (input == null){
			//System.out.println("test3");
			input = getClass().getResourceAsStream("default.ico");
		}
		
		if (input != null){
			//System.out.println("test4");
			try {
				BufferedImage img = null;
				List<BufferedImage> imgs = ICODecoder.read(input);
				img = imgs != null ? imgs.size() > 0 ? imgs.get(0) : null : null;
				img = resize(img,16,16);
				WritableImage imfx = SwingFXUtils.toFXImage(img, null);
				return imfx;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}else{
			//System.out.println("test5");
			return null;
		}
		return null;
		
		
	}
	public String toFaviURL(String url){
		int s = url.indexOf(":")+3;
		int e = url.indexOf("/",s);
		String faviURL = url.substring(0,e) + "/favicon.ico";
		return faviURL;
	}
	public static BufferedImage resize(BufferedImage img, int newW, int newH) { 
	    java.awt.Image tmp = img.getScaledInstance(newW, newH, java.awt.Image.SCALE_SMOOTH);
	    BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);

	    Graphics2D g2d = dimg.createGraphics();
	    g2d.drawImage(tmp, 0, 0, null);
	    g2d.dispose();

	    return dimg;
	}  

}
